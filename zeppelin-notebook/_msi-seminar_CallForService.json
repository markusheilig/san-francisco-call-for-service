{"paragraphs":[{"text":"%md ### Access spark variables\n- 'sc' refers to the 'SparkContext'\n- 'spark' refers to the 'SparkSession'","user":"anonymous","dateUpdated":"2018-05-09T16:18:30+0200","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Access spark variables</h3>\n<ul>\n  <li>&lsquo;sc&rsquo; refers to the &lsquo;SparkContext&rsquo;</li>\n  <li>&lsquo;spark&rsquo; refers to the &lsquo;SparkSession&rsquo;</li>\n</ul>\n</div>"}]},"apps":[],"jobName":"paragraph_1525542212532_-815596475","id":"20180505-182232_100685251","dateCreated":"2018-05-05T19:43:32+0200","dateStarted":"2018-05-09T16:18:30+0200","dateFinished":"2018-05-09T16:18:30+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:289"},{"text":"sc\nspark","user":"anonymous","dateUpdated":"2018-05-09T16:18:30+0200","config":{"tableHide":false,"editorSetting":{"language":"scala"},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res121: org.apache.spark.SparkContext = org.apache.spark.SparkContext@556bf2f9\nres122: org.apache.spark.sql.SparkSession = org.apache.spark.sql.SparkSession@4cde4819\n"}]},"apps":[],"jobName":"paragraph_1525542212532_-815596475","id":"20180505-182426_1778627150","dateCreated":"2018-05-05T19:43:32+0200","dateStarted":"2018-05-09T16:18:30+0200","dateFinished":"2018-05-09T16:18:31+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:290"},{"text":"%md ### Read dataset from csv file into a dataframe called 'df'\nWe will only use a small file with 10k entries for live demonstration","user":"anonymous","dateUpdated":"2018-05-09T16:18:30+0200","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Read dataset from csv file into a dataframe called &lsquo;df&rsquo;</h3>\n<p>We will only use a small file with 10k entries for live demonstration</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1525542212532_-815596475","id":"20180505-182704_370792577","dateCreated":"2018-05-05T19:43:32+0200","dateStarted":"2018-05-09T16:18:31+0200","dateFinished":"2018-05-09T16:18:31+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:291"},{"text":"val csvFile = \"/Volumes/TranscendJetdriveLite330/htwg/master/sem4/seminar/scala-spark-mllib-demo/datasets/10k.csv\"\nvar df = spark.read.option(\"header\", \"true\").option(\"inferSchema\", \"true\").csv(csvFile)\n","user":"anonymous","dateUpdated":"2018-05-13T10:33:21+0200","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"csvFile: String = /Volumes/TranscendJetdriveLite330/htwg/master/sem4/seminar/scala-spark-mllib-demo/datasets/10k.csv\ndf: org.apache.spark.sql.DataFrame = [Call Number: int, Unit ID: string ... 32 more fields]\n"}]},"apps":[],"jobName":"paragraph_1525542212532_-815596475","id":"20180505-182727_211105288","dateCreated":"2018-05-05T19:43:32+0200","dateStarted":"2018-05-13T10:33:22+0200","dateFinished":"2018-05-13T10:33:52+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:292"},{"text":"%md ### Rename column names\nColumns of the original dataset contain spaces and dashes -> lets remove them","user":"anonymous","dateUpdated":"2018-05-09T16:18:31+0200","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Rename column names</h3>\n<p>Columns of the original dataset contain spaces and dashes -&gt; lets remove them</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1525542212532_-815596475","id":"20180505-182905_417148239","dateCreated":"2018-05-05T19:43:32+0200","dateStarted":"2018-05-09T16:18:31+0200","dateFinished":"2018-05-09T16:18:31+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:293"},{"text":"val newColumnNames = df.columns.map(_.replace(\" \", \"\").replace(\"-\", \"\"))\ndf = df.toDF(newColumnNames: _*)","user":"anonymous","dateUpdated":"2018-05-13T10:34:28+0200","config":{"tableHide":true,"editorSetting":{"language":"scala","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"newColumnNames: Array[String] = Array(CallNumber, UnitID, IncidentNumber, CallType, CallDate, WatchDate, ReceivedDtTm, EntryDtTm, DispatchDtTm, ResponseDtTm, OnSceneDtTm, TransportDtTm, HospitalDtTm, CallFinalDisposition, AvailableDtTm, Address, City, ZipcodeofIncident, Battalion, StationArea, Box, OriginalPriority, Priority, FinalPriority, ALSUnit, CallTypeGroup, NumberofAlarms, UnitType, Unitsequenceincalldispatch, FirePreventionDistrict, SupervisorDistrict, NeighborhooodsAnalysisBoundaries, RowID, Location)\ndf: org.apache.spark.sql.DataFrame = [CallNumber: int, UnitID: string ... 32 more fields]\n"}]},"apps":[],"jobName":"paragraph_1525542212533_-815981224","id":"20180505-183001_1663637001","dateCreated":"2018-05-05T19:43:32+0200","dateStarted":"2018-05-13T10:34:23+0200","dateFinished":"2018-05-13T10:34:26+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:294"},{"text":"%md # Data Exploration","user":"anonymous","dateUpdated":"2018-05-09T16:20:38+0200","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Data Exploration</h1>\n</div>"}]},"apps":[],"jobName":"paragraph_1525875626831_-592962109","id":"20180509-162026_973890669","dateCreated":"2018-05-09T16:20:26+0200","dateStarted":"2018-05-09T16:20:38+0200","dateFinished":"2018-05-09T16:20:38+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:295"},{"text":"df.printSchema()\n","user":"anonymous","dateUpdated":"2018-05-13T10:34:32+0200","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"root\n |-- CallNumber: integer (nullable = true)\n |-- UnitID: string (nullable = true)\n |-- IncidentNumber: integer (nullable = true)\n |-- CallType: string (nullable = true)\n |-- CallDate: string (nullable = true)\n |-- WatchDate: string (nullable = true)\n |-- ReceivedDtTm: string (nullable = true)\n |-- EntryDtTm: string (nullable = true)\n |-- DispatchDtTm: string (nullable = true)\n |-- ResponseDtTm: string (nullable = true)\n |-- OnSceneDtTm: string (nullable = true)\n |-- TransportDtTm: string (nullable = true)\n |-- HospitalDtTm: string (nullable = true)\n |-- CallFinalDisposition: string (nullable = true)\n |-- AvailableDtTm: string (nullable = true)\n |-- Address: string (nullable = true)\n |-- City: string (nullable = true)\n |-- ZipcodeofIncident: integer (nullable = true)\n |-- Battalion: string (nullable = true)\n |-- StationArea: integer (nullable = true)\n |-- Box: integer (nullable = true)\n |-- OriginalPriority: string (nullable = true)\n |-- Priority: string (nullable = true)\n |-- FinalPriority: integer (nullable = true)\n |-- ALSUnit: boolean (nullable = true)\n |-- CallTypeGroup: string (nullable = true)\n |-- NumberofAlarms: integer (nullable = true)\n |-- UnitType: string (nullable = true)\n |-- Unitsequenceincalldispatch: integer (nullable = true)\n |-- FirePreventionDistrict: string (nullable = true)\n |-- SupervisorDistrict: string (nullable = true)\n |-- NeighborhooodsAnalysisBoundaries: string (nullable = true)\n |-- RowID: string (nullable = true)\n |-- Location: string (nullable = true)\n\n"}]},"apps":[],"jobName":"paragraph_1525875644339_1371596423","id":"20180509-162044_853751011","dateCreated":"2018-05-09T16:20:44+0200","dateStarted":"2018-05-13T10:34:32+0200","dateFinished":"2018-05-13T10:34:32+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:296"},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1526200509436_-1601222676","id":"20180513-103509_489153769","dateCreated":"2018-05-13T10:35:09+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:3156","text":"%md ### How many incidents per Call Type Group?","dateUpdated":"2018-05-13T10:35:29+0200","dateFinished":"2018-05-13T10:35:30+0200","dateStarted":"2018-05-13T10:35:29+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>How many incidents per Call Type Group?</h3>\n</div>"}]}},{"text":"df.groupBy($\"CallTypeGroup\").count().orderBy($\"count\".desc).show(truncate = false)","user":"anonymous","dateUpdated":"2018-05-13T10:35:49+0200","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+----------------------------+-----+\n|CallTypeGroup               |count|\n+----------------------------+-----+\n|Potentially Life-Threatening|4957 |\n|Non Life-threatening        |2506 |\n|Alarm                       |2327 |\n|Fire                        |209  |\n+----------------------------+-----+\n\n"}]},"apps":[],"jobName":"paragraph_1525875879991_603574678","id":"20180509-162439_614832005","dateCreated":"2018-05-09T16:24:39+0200","dateStarted":"2018-05-13T10:35:49+0200","dateFinished":"2018-05-13T10:35:53+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:297"},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1526201050635_320194718","id":"20180513-104410_786508983","dateCreated":"2018-05-13T10:44:10+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:3927","text":"%md ### How many neighbourhoods are defined in our dataset?","dateUpdated":"2018-05-13T10:44:26+0200","dateFinished":"2018-05-13T10:44:26+0200","dateStarted":"2018-05-13T10:44:26+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>How many neighbourhoods are defined in our dataset?</h3>\n</div>"}]}},{"text":"df.select($\"NeighborhooodsAnalysisBoundaries\").distinct().count()\n","user":"anonymous","dateUpdated":"2018-05-13T10:44:53+0200","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1526201090598_1158775466","id":"20180513-104450_1710172090","dateCreated":"2018-05-13T10:44:50+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:4021","dateFinished":"2018-05-13T10:44:55+0200","dateStarted":"2018-05-13T10:44:53+0200","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res16: Long = 42\n"}]}},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1526200562807_1231526945","id":"20180513-103602_1495682826","dateCreated":"2018-05-13T10:36:02+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:3267","text":"%md ### How many incidents per neighborhood?","dateUpdated":"2018-05-13T10:36:20+0200","dateFinished":"2018-05-13T10:36:20+0200","dateStarted":"2018-05-13T10:36:20+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>How many incidents per neighborhood?</h3>\n</div>"}]}},{"text":"df.groupBy( $\"NeighborhooodsAnalysisBoundaries\").count().orderBy($\"count\".desc).show(100, truncate = false)","user":"anonymous","dateUpdated":"2018-05-13T10:36:23+0200","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------------------------------+-----+\n|NeighborhooodsAnalysisBoundaries|count|\n+--------------------------------+-----+\n|Tenderloin                      |1542 |\n|South of Market                 |1023 |\n|Mission                         |904  |\n|Financial District/South Beach  |822  |\n|Bayview Hunters Point           |378  |\n|Sunset/Parkside                 |372  |\n|Western Addition                |364  |\n|Nob Hill                        |267  |\n|Outer Richmond                  |251  |\n|North Beach                     |251  |\n|Chinatown                       |250  |\n|Hayes Valley                    |234  |\n|Castro/Upper Market             |232  |\n|Excelsior                       |217  |\n|West of Twin Peaks              |189  |\n|Mission Bay                     |175  |\n|Russian Hill                    |171  |\n|Marina                          |162  |\n|Oceanview/Merced/Ingleside      |162  |\n|Bernal Heights                  |152  |\n|Potrero Hill                    |148  |\n|Pacific Heights                 |146  |\n|Visitacion Valley               |144  |\n|Outer Mission                   |142  |\n|Lone Mountain/USF               |138  |\n|Inner Sunset                    |132  |\n|Lakeshore                       |114  |\n|Haight Ashbury                  |111  |\n|Noe Valley                      |110  |\n|Japantown                       |93   |\n|Inner Richmond                  |93   |\n|Portola                         |93   |\n|Treasure Island                 |76   |\n|Presidio Heights                |74   |\n|Presidio                        |66   |\n|Golden Gate Park                |54   |\n|Twin Peaks                      |52   |\n|Glen Park                       |28   |\n|Seacliff                        |25   |\n|None                            |19   |\n|McLaren Park                    |17   |\n|Lincoln Park                    |6    |\n+--------------------------------+-----+\n\n"}]},"apps":[],"jobName":"paragraph_1525876180847_2141460359","id":"20180509-162940_951123989","dateCreated":"2018-05-09T16:29:40+0200","dateStarted":"2018-05-13T10:36:23+0200","dateFinished":"2018-05-13T10:36:25+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:298"},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1526200768181_586042529","id":"20180513-103928_997554462","dateCreated":"2018-05-13T10:39:28+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:3419","text":"%md ### How many incidents per Call Type Group in Tenderloin?","dateUpdated":"2018-05-13T10:39:50+0200","dateFinished":"2018-05-13T10:39:50+0200","dateStarted":"2018-05-13T10:39:50+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>How many incidents per Call Type Group in Tenderloin?</h3>\n</div>"}]}},{"text":"df.where($\"NeighborhooodsAnalysisBoundaries\" === \"Tenderloin\").groupBy( $\"CallTypeGroup\").count().orderBy($\"count\".desc).show(100, truncate = false)","user":"anonymous","dateUpdated":"2018-05-13T10:39:15+0200","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+----------------------------+-----+\n|CallTypeGroup               |count|\n+----------------------------+-----+\n|Potentially Life-Threatening|886  |\n|Non Life-threatening        |394  |\n|Alarm                       |254  |\n|Fire                        |8    |\n+----------------------------+-----+\n\n"}]},"apps":[],"jobName":"paragraph_1525876365869_441096271","id":"20180509-163245_1044022011","dateCreated":"2018-05-09T16:32:45+0200","dateStarted":"2018-05-13T10:39:15+0200","dateFinished":"2018-05-13T10:39:17+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:299"},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1526200819770_-2002319853","id":"20180513-104019_1156148271","dateCreated":"2018-05-13T10:40:19+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:3491","text":"%md ### How many incidents per year?","dateUpdated":"2018-05-13T10:40:32+0200","dateFinished":"2018-05-13T10:40:32+0200","dateStarted":"2018-05-13T10:40:32+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>How many incidents per year?</h3>\n</div>"}]}},{"text":"import org.apache.spark.sql.functions._\ndf.withColumn(\"EntryDtTm\", unix_timestamp($\"EntryDtTm\", \"MM/dd/yyyy hh:mm:ss a\").cast(\"timestamp\"))\n.groupBy(year($\"EntryDtTm\").alias(\"Year\")).count().orderBy($\"Year\".desc).show()","user":"anonymous","dateUpdated":"2018-05-13T10:40:35+0200","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.sql.functions._\n+----+-----+\n|Year|count|\n+----+-----+\n|2018| 9786|\n|2017|   78|\n|2016|   64|\n|2015|    8|\n|2014|   62|\n|2012|    1|\n+----+-----+\n\n"}]},"apps":[],"jobName":"paragraph_1525876605319_-1628515680","id":"20180509-163645_1096178213","dateCreated":"2018-05-09T16:36:45+0200","dateStarted":"2018-05-13T10:40:35+0200","dateFinished":"2018-05-13T10:40:38+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:300"},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1526200858159_-747992466","id":"20180513-104058_1317659724","dateCreated":"2018-05-13T10:40:58+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:3609","text":"%md ### Which days in the year are the most critical?","dateUpdated":"2018-05-13T10:41:31+0200","dateFinished":"2018-05-13T10:41:31+0200","dateStarted":"2018-05-13T10:41:31+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Which days in the year are the most critical?</h3>\n</div>"}]}},{"text":"import org.apache.spark.sql.functions._\ndf.withColumn(\"EntryDtTm\", unix_timestamp($\"EntryDtTm\", \"MM/dd/yyyy hh:mm:ss a\").cast(\"timestamp\"))\n.withColumn(\"DayOfMonth\", dayofmonth($\"EntryDtTm\"))\n.withColumn(\"MonthOfYear\", month($\"EntryDtTm\"))\n.where($\"CallTypeGroup\" === \"Potentially Life-Threatening\")\n.groupBy($\"MonthOfYear\", $\"DayOfMonth\")\n.count()\n.orderBy($\"count\".desc)\n.show(366, false)\n//df.select().groupBy(dayofyear($\"EntryDtTm\").alias(\"DayOfYear\")).count().orderBy($\"count\".desc).show()","user":"anonymous","dateUpdated":"2018-05-09T17:25:22+0200","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.sql.functions._\n+-----------+----------+-----+\n|MonthOfYear|DayOfMonth|count|\n+-----------+----------+-----+\n|9          |2         |1831 |\n|1          |1         |1746 |\n|9          |1         |1611 |\n|2          |3         |1521 |\n|9          |3         |1491 |\n|4          |30        |1484 |\n|12         |9         |1424 |\n|3          |17        |1419 |\n|6          |26        |1398 |\n|9          |19        |1398 |\n|9          |6         |1396 |\n|6          |19        |1393 |\n|10         |8         |1391 |\n|2          |6         |1389 |\n|4          |10        |1382 |\n|3          |16        |1380 |\n|12         |14        |1374 |\n|3          |3         |1373 |\n|6          |3         |1372 |\n|5          |1         |1372 |\n|11         |1         |1371 |\n|2          |7         |1371 |\n|9          |18        |1369 |\n|5          |21        |1368 |\n|3          |26        |1366 |\n|1          |4         |1362 |\n|6          |8         |1362 |\n|12         |2         |1361 |\n|2          |4         |1361 |\n|6          |27        |1360 |\n|12         |12        |1358 |\n|3          |18        |1357 |\n|4          |20        |1354 |\n|9          |20        |1352 |\n|9          |24        |1352 |\n|9          |26        |1350 |\n|10         |7         |1349 |\n|10         |2         |1348 |\n|12         |8         |1348 |\n|7          |22        |1348 |\n|3          |31        |1347 |\n|1          |5         |1342 |\n|4          |2         |1342 |\n|2          |2         |1339 |\n|3          |7         |1336 |\n|1          |12        |1331 |\n|10         |5         |1329 |\n|5          |7         |1328 |\n|2          |28        |1327 |\n|6          |16        |1327 |\n|5          |4         |1325 |\n|2          |9         |1324 |\n|2          |15        |1324 |\n|5          |2         |1323 |\n|4          |6         |1321 |\n|11         |18        |1321 |\n|2          |21        |1320 |\n|2          |12        |1319 |\n|10         |9         |1318 |\n|3          |29        |1317 |\n|11         |3         |1316 |\n|5          |15        |1314 |\n|6          |25        |1314 |\n|3          |27        |1311 |\n|11         |11        |1311 |\n|3          |21        |1310 |\n|9          |23        |1310 |\n|12         |10        |1310 |\n|6          |9         |1310 |\n|6          |28        |1306 |\n|3          |30        |1306 |\n|7          |7         |1306 |\n|2          |10        |1305 |\n|1          |6         |1305 |\n|6          |22        |1304 |\n|6          |17        |1304 |\n|2          |18        |1304 |\n|3          |9         |1303 |\n|10         |1         |1302 |\n|1          |13        |1302 |\n|5          |17        |1301 |\n|4          |29        |1299 |\n|5          |6         |1297 |\n|3          |2         |1297 |\n|3          |8         |1297 |\n|2          |5         |1295 |\n|6          |14        |1293 |\n|10         |21        |1291 |\n|1          |8         |1290 |\n|12         |5         |1289 |\n|9          |5         |1289 |\n|6          |18        |1287 |\n|8          |3         |1287 |\n|3          |10        |1287 |\n|10         |6         |1286 |\n|4          |13        |1286 |\n|4          |27        |1284 |\n|4          |18        |1284 |\n|2          |25        |1283 |\n|1          |2         |1279 |\n|4          |17        |1278 |\n|11         |13        |1278 |\n|10         |19        |1277 |\n|6          |5         |1277 |\n|10         |29        |1276 |\n|5          |8         |1275 |\n|11         |4         |1274 |\n|1          |14        |1273 |\n|4          |1         |1272 |\n|6          |1         |1272 |\n|10         |26        |1271 |\n|1          |9         |1268 |\n|2          |8         |1268 |\n|8          |1         |1267 |\n|1          |3         |1267 |\n|5          |3         |1266 |\n|4          |12        |1266 |\n|8          |8         |1266 |\n|5          |31        |1265 |\n|6          |24        |1265 |\n|3          |24        |1264 |\n|5          |25        |1264 |\n|12         |16        |1263 |\n|10         |4         |1263 |\n|12         |11        |1262 |\n|7          |30        |1262 |\n|8          |19        |1260 |\n|8          |30        |1259 |\n|11         |9         |1258 |\n|12         |30        |1258 |\n|7          |11        |1257 |\n|12         |18        |1256 |\n|5          |14        |1256 |\n|7          |14        |1255 |\n|1          |15        |1255 |\n|9          |11        |1254 |\n|11         |6         |1253 |\n|2          |14        |1252 |\n|4          |4         |1249 |\n|10         |28        |1248 |\n|4          |8         |1248 |\n|4          |16        |1248 |\n|3          |12        |1247 |\n|10         |30        |1247 |\n|6          |21        |1246 |\n|1          |7         |1246 |\n|12         |1         |1246 |\n|10         |16        |1246 |\n|3          |6         |1245 |\n|10         |10        |1245 |\n|5          |13        |1244 |\n|7          |28        |1244 |\n|4          |14        |1243 |\n|2          |19        |1243 |\n|10         |24        |1242 |\n|5          |28        |1241 |\n|12         |29        |1240 |\n|6          |20        |1240 |\n|8          |11        |1240 |\n|9          |4         |1240 |\n|5          |29        |1239 |\n|3          |28        |1239 |\n|9          |8         |1238 |\n|8          |27        |1238 |\n|7          |16        |1238 |\n|6          |15        |1237 |\n|3          |20        |1236 |\n|4          |22        |1236 |\n|4          |23        |1234 |\n|1          |17        |1234 |\n|3          |15        |1233 |\n|2          |11        |1232 |\n|10         |3         |1231 |\n|1          |27        |1231 |\n|5          |12        |1230 |\n|12         |28        |1230 |\n|6          |2         |1229 |\n|1          |28        |1229 |\n|11         |21        |1229 |\n|2          |16        |1229 |\n|4          |15        |1228 |\n|1          |30        |1228 |\n|9          |10        |1228 |\n|12         |21        |1228 |\n|2          |1         |1228 |\n|3          |23        |1227 |\n|6          |6         |1227 |\n|1          |10        |1226 |\n|9          |30        |1226 |\n|9          |28        |1225 |\n|12         |13        |1225 |\n|8          |18        |1225 |\n|2          |24        |1225 |\n|2          |26        |1224 |\n|1          |23        |1224 |\n|12         |3         |1223 |\n|6          |13        |1223 |\n|11         |12        |1223 |\n|2          |13        |1223 |\n|6          |10        |1222 |\n|3          |1         |1222 |\n|10         |14        |1222 |\n|12         |31        |1220 |\n|9          |9         |1220 |\n|1          |19        |1220 |\n|5          |19        |1220 |\n|8          |31        |1219 |\n|4          |26        |1218 |\n|3          |22        |1217 |\n|5          |22        |1217 |\n|3          |5         |1216 |\n|9          |16        |1216 |\n|1          |25        |1216 |\n|9          |21        |1216 |\n|8          |5         |1216 |\n|9          |25        |1215 |\n|9          |7         |1215 |\n|2          |23        |1214 |\n|8          |4         |1213 |\n|5          |5         |1213 |\n|5          |20        |1213 |\n|10         |23        |1213 |\n|10         |15        |1212 |\n|11         |22        |1211 |\n|8          |17        |1211 |\n|10         |27        |1209 |\n|6          |12        |1209 |\n|7          |1         |1208 |\n|10         |12        |1207 |\n|8          |15        |1205 |\n|12         |17        |1204 |\n|11         |20        |1204 |\n|7          |15        |1204 |\n|6          |29        |1203 |\n|11         |19        |1203 |\n|4          |24        |1201 |\n|11         |2         |1201 |\n|3          |14        |1199 |\n|12         |15        |1199 |\n|11         |8         |1199 |\n|4          |3         |1199 |\n|12         |23        |1197 |\n|4          |21        |1196 |\n|1          |26        |1196 |\n|1          |18        |1196 |\n|1          |11        |1196 |\n|3          |25        |1196 |\n|9          |15        |1195 |\n|3          |4         |1195 |\n|12         |4         |1194 |\n|5          |23        |1192 |\n|8          |10        |1191 |\n|12         |20        |1190 |\n|11         |16        |1190 |\n|2          |27        |1190 |\n|4          |7         |1190 |\n|7          |26        |1189 |\n|8          |22        |1189 |\n|8          |28        |1188 |\n|5          |10        |1186 |\n|11         |10        |1186 |\n|10         |31        |1185 |\n|8          |20        |1185 |\n|6          |7         |1184 |\n|6          |30        |1184 |\n|7          |20        |1183 |\n|11         |17        |1183 |\n|10         |18        |1183 |\n|11         |5         |1180 |\n|9          |14        |1180 |\n|5          |26        |1179 |\n|3          |19        |1179 |\n|1          |20        |1179 |\n|4          |9         |1178 |\n|4          |5         |1177 |\n|8          |21        |1176 |\n|12         |6         |1176 |\n|8          |9         |1176 |\n|4          |19        |1176 |\n|1          |21        |1175 |\n|2          |22        |1174 |\n|3          |11        |1174 |\n|7          |9         |1172 |\n|7          |21        |1171 |\n|7          |25        |1171 |\n|12         |22        |1170 |\n|7          |13        |1168 |\n|9          |12        |1168 |\n|1          |24        |1168 |\n|5          |24        |1166 |\n|9          |27        |1166 |\n|5          |27        |1166 |\n|8          |7         |1166 |\n|6          |23        |1164 |\n|4          |28        |1163 |\n|6          |4         |1163 |\n|10         |25        |1163 |\n|1          |31        |1162 |\n|7          |8         |1161 |\n|12         |19        |1160 |\n|8          |6         |1160 |\n|8          |24        |1157 |\n|1          |16        |1157 |\n|8          |12        |1156 |\n|5          |30        |1155 |\n|11         |29        |1155 |\n|9          |17        |1154 |\n|10         |13        |1154 |\n|6          |11        |1152 |\n|10         |11        |1152 |\n|11         |14        |1150 |\n|8          |26        |1150 |\n|9          |29        |1149 |\n|7          |6         |1149 |\n|4          |11        |1148 |\n|12         |27        |1145 |\n|11         |15        |1144 |\n|5          |9         |1142 |\n|8          |2         |1138 |\n|7          |2         |1137 |\n|10         |22        |1135 |\n|8          |29        |1135 |\n|11         |28        |1134 |\n|10         |20        |1133 |\n|7          |10        |1131 |\n|3          |13        |1131 |\n|7          |31        |1128 |\n|1          |29        |1127 |\n|7          |19        |1127 |\n|7          |24        |1123 |\n|5          |18        |1120 |\n|7          |5         |1113 |\n|11         |7         |1113 |\n|7          |17        |1112 |\n|7          |3         |1112 |\n|8          |23        |1112 |\n|7          |12        |1109 |\n|10         |17        |1108 |\n|12         |7         |1108 |\n|5          |11        |1104 |\n|7          |27        |1103 |\n|7          |18        |1099 |\n|8          |16        |1098 |\n|11         |30        |1097 |\n|9          |22        |1089 |\n|12         |24        |1087 |\n|9          |13        |1085 |\n|7          |4         |1083 |\n|2          |20        |1081 |\n|2          |17        |1079 |\n|12         |25        |1078 |\n|8          |13        |1077 |\n|11         |26        |1076 |\n|7          |29        |1073 |\n|7          |23        |1069 |\n|4          |25        |1069 |\n|8          |25        |1065 |\n|8          |14        |1065 |\n|1          |22        |1055 |\n|11         |27        |1053 |\n|11         |25        |1045 |\n|11         |24        |1043 |\n|12         |26        |1030 |\n|5          |16        |1025 |\n|11         |23        |999  |\n|2          |29        |482  |\n+-----------+----------+-----+\n\n"}]},"apps":[],"jobName":"paragraph_1525877896275_154236103","id":"20180509-165816_1652024678","dateCreated":"2018-05-09T16:58:16+0200","dateStarted":"2018-05-09T17:25:22+0200","dateFinished":"2018-05-09T17:25:31+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:301"},{"text":"%md ### Drop some data\nSome columns contain no values (null) -> lets drop them!","user":"anonymous","dateUpdated":"2018-05-09T16:20:13+0200","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Drop some data</h3>\n<p>Some columns contain no values (null) -&gt; lets drop them!</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1525542212533_-815981224","id":"20180505-183052_1909174503","dateCreated":"2018-05-05T19:43:32+0200","dateStarted":"2018-05-09T16:20:13+0200","dateFinished":"2018-05-09T16:20:13+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:302"},{"text":"df = df.na.drop(Array(\"CallType\", \"Priority\", \"CallTypeGroup\", \"EntryDtTm\"))","user":"anonymous","dateUpdated":"2018-05-13T10:41:52+0200","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"df: org.apache.spark.sql.DataFrame = [CallNumber: int, UnitID: string ... 32 more fields]\n"}]},"apps":[],"jobName":"paragraph_1525542212533_-815981224","id":"20180505-183232_1746008601","dateCreated":"2018-05-05T19:43:32+0200","dateStarted":"2018-05-13T10:41:52+0200","dateFinished":"2018-05-13T10:41:53+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:303"},{"text":"%md ### Let's generate some more features","user":"anonymous","dateUpdated":"2018-05-09T16:18:31+0200","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Let&rsquo;s generate some more features</h3>\n</div>"}]},"apps":[],"jobName":"paragraph_1525542212534_-814826977","id":"20180505-183333_966739090","dateCreated":"2018-05-05T19:43:32+0200","dateStarted":"2018-05-09T16:18:31+0200","dateFinished":"2018-05-09T16:18:31+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:304"},{"text":"import org.apache.spark.sql.functions._\n\ndf = df.withColumn(\"EntryDtTm\", unix_timestamp($\"EntryDtTm\", \"MM/dd/yyyy hh:mm:ss a\").cast(\"timestamp\"))\ndf = df.withColumn(\"HourOfDay\", hour($\"EntryDtTm\"))\ndf = df.withColumn(\"DayOfYear\", dayofyear($\"EntryDtTm\"))\ndf = df.na.drop(Array(\"HourOfDay\", \"DayOfYear\"))\n","user":"anonymous","dateUpdated":"2018-05-13T10:41:58+0200","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.sql.functions._\ndf: org.apache.spark.sql.DataFrame = [CallNumber: int, UnitID: string ... 32 more fields]\ndf: org.apache.spark.sql.DataFrame = [CallNumber: int, UnitID: string ... 33 more fields]\ndf: org.apache.spark.sql.DataFrame = [CallNumber: int, UnitID: string ... 34 more fields]\ndf: org.apache.spark.sql.DataFrame = [CallNumber: int, UnitID: string ... 34 more fields]\n"}]},"apps":[],"jobName":"paragraph_1525542212534_-814826977","id":"20180505-183846_1695411028","dateCreated":"2018-05-05T19:43:32+0200","dateStarted":"2018-05-13T10:41:58+0200","dateFinished":"2018-05-13T10:42:00+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:305"},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1526200933175_20090576","id":"20180513-104213_1927603522","dateCreated":"2018-05-13T10:42:13+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:3757","text":"%md ### Lets calculate the geohash!","dateUpdated":"2018-05-13T10:42:39+0200","dateFinished":"2018-05-13T10:42:39+0200","dateStarted":"2018-05-13T10:42:39+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Lets calculate the geohash!</h3>\n</div>"}]}},{"text":"import ch.hsr.geohash.GeoHash\nimport scala.collection.mutable.ListBuffer\n\nval pattern = \"-?\\\\d+\\\\.{1}\\\\d+\".r\nspark.udf.register(\"geohash\", (s: String) => {\n  var coords = new ListBuffer[String]\n  pattern.findAllMatchIn(s).foreach(m=>coords+=m.toString())\n  GeoHash.geoHashStringWithCharacterPrecision(coords.apply(0).toDouble, coords.apply(1).toDouble, 6)\n})\ndf = df.withColumn(\"geohash\", callUDF(\"geohash\", $\"Location\"))\n","user":"anonymous","dateUpdated":"2018-05-13T10:43:05+0200","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import ch.hsr.geohash.GeoHash\nimport scala.collection.mutable.ListBuffer\npattern: scala.util.matching.Regex = -?\\d+\\.{1}\\d+\nres9: org.apache.spark.sql.expressions.UserDefinedFunction = UserDefinedFunction(<function1>,StringType,Some(List(StringType)))\ndf: org.apache.spark.sql.DataFrame = [CallNumber: int, UnitID: string ... 35 more fields]\n"}]},"apps":[],"jobName":"paragraph_1525686268728_1818572127","id":"20180507-114428_1539328779","dateCreated":"2018-05-07T11:44:28+0200","dateStarted":"2018-05-13T10:43:05+0200","dateFinished":"2018-05-13T10:43:07+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:306"},{"text":"%md ### Lets create our label column","user":"anonymous","dateUpdated":"2018-05-09T16:18:31+0200","config":{"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Lets create our label column</h3>\n</div>"}]},"apps":[],"jobName":"paragraph_1525542212534_-814826977","id":"20180505-183954_520582890","dateCreated":"2018-05-05T19:43:32+0200","dateStarted":"2018-05-09T16:18:31+0200","dateFinished":"2018-05-09T16:18:31+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:307"},{"text":"def cdfUDF = udf((finalDisposition: String) => {\n    Set(\"Code 2 Transport\",\n        \"Fire\",\n        \"Patient Declined Transport\",\n        \"Against Medical Advice\",\n        \"Medical Examiner\",\n        \"Multi-casualty Incident\").contains(finalDisposition)\n})\n\ndef hospitalUDF = udf((hospital: String) => {\n    if (hospital == null || hospital.isEmpty) false else true\n})\n\ndf = df.withColumn(\"isCriticalDispositionT\", cdfUDF(df(\"CallFinalDisposition\")))\n.withColumn(\"isHospitalTransportT\", hospitalUDF(df(\"HospitalDtTm\")))\n\nvar dfTemp = df.select($\"IncidentNumber\", $\"isHospitalTransportT\", $\"isCriticalDispositionT\")\ndfTemp = dfTemp.groupBy(\"IncidentNumber\")\n               .agg(collect_set('isCriticalDispositionT) as \"tmpCD\", collect_set('isHospitalTransportT) as \"tmpH\")\n               .withColumn(\"isCriticalDisposition\", array_contains('tmpCD, true))\n               .withColumn(\"isHospitalTransport\", array_contains('tmpH, true))\n               .drop(\"tmpCD\").drop(\"tmpH\")\ndf = df.join(dfTemp, Seq(\"IncidentNumber\"))\n\n// data processing - add the label column (label = 1 <==> CallTypeGroup = \"Potentially Life-Threatening\" otherwise label = 0)\ndf = df.withColumn(\"label\",\n    when($\"CallTypeGroup\" === \"Potentially Life-Threatening\" && ($\"isCriticalDisposition\" === true || $\"isHospitalTransport\" === true), 1).otherwise(0))\n\n","user":"anonymous","dateUpdated":"2018-05-13T10:43:35+0200","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"cdfUDF: org.apache.spark.sql.expressions.UserDefinedFunction\nhospitalUDF: org.apache.spark.sql.expressions.UserDefinedFunction\ndf: org.apache.spark.sql.DataFrame = [CallNumber: int, UnitID: string ... 37 more fields]\ndfTemp: org.apache.spark.sql.DataFrame = [IncidentNumber: int, isHospitalTransportT: boolean ... 1 more field]\ndfTemp: org.apache.spark.sql.DataFrame = [IncidentNumber: int, isCriticalDisposition: boolean ... 1 more field]\ndf: org.apache.spark.sql.DataFrame = [IncidentNumber: int, CallNumber: int ... 39 more fields]\ndf: org.apache.spark.sql.DataFrame = [IncidentNumber: int, CallNumber: int ... 40 more fields]\n"}]},"apps":[],"jobName":"paragraph_1525542212534_-814826977","id":"20180505-191344_1887559871","dateCreated":"2018-05-05T19:43:32+0200","dateStarted":"2018-05-13T10:43:35+0200","dateFinished":"2018-05-13T10:43:41+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:308"},{"text":"%md ### How many incidents are life-threatening?","user":"anonymous","dateUpdated":"2018-05-09T16:18:31+0200","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>How many incidents are life-threatening?</h3>\n</div>"}]},"apps":[],"jobName":"paragraph_1525861199039_365165365","id":"20180509-121959_1979965776","dateCreated":"2018-05-09T12:19:59+0200","dateStarted":"2018-05-09T16:18:32+0200","dateFinished":"2018-05-09T16:18:32+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:311"},{"text":"val potentiallyLifeThreatening = df.filter($\"label\" === 1).count()\nval percentage = potentiallyLifeThreatening.toDouble / df.count()\nprintln(\"%.2f%% of all incidents are potentially life-threatening\".format(percentage * 100))","user":"anonymous","dateUpdated":"2018-05-13T10:45:11+0200","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":true},"editorMode":"ace/mode/scala","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"potentiallyLifeThreatening: Long = 4315\npercentage: Double = 0.43154315431543155\n43.15% of all incidents are potentially life-threatening\n"}]},"apps":[],"jobName":"paragraph_1525861263717_225024820","id":"20180509-122103_2091948310","dateCreated":"2018-05-09T12:21:03+0200","dateStarted":"2018-05-13T10:45:11+0200","dateFinished":"2018-05-13T10:45:15+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:312"},{"text":"%md ### Split dataframe in train & test set","user":"anonymous","dateUpdated":"2018-05-09T16:18:32+0200","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Split dataframe in train &amp; test set</h3>\n</div>"}]},"apps":[],"jobName":"paragraph_1525542212537_-817520219","id":"20180505-191352_263390882","dateCreated":"2018-05-05T19:43:32+0200","dateStarted":"2018-05-09T16:18:32+0200","dateFinished":"2018-05-09T16:18:32+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:313"},{"text":"val Array(train, test) = df.randomSplit(Array(0.9, 0.1), seed = 12345)","user":"anonymous","dateUpdated":"2018-05-13T10:45:20+0200","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"train: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [IncidentNumber: int, CallNumber: int ... 40 more fields]\ntest: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [IncidentNumber: int, CallNumber: int ... 40 more fields]\n"}]},"apps":[],"jobName":"paragraph_1525542212537_-817520219","id":"20180505-191425_1484507720","dateCreated":"2018-05-05T19:43:32+0200","dateStarted":"2018-05-13T10:45:20+0200","dateFinished":"2018-05-13T10:45:21+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:314"},{"text":"%md ### Convert categorical string values","user":"anonymous","dateUpdated":"2018-05-09T16:18:32+0200","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Convert categorical string values</h3>\n</div>"}]},"apps":[],"jobName":"paragraph_1525542212538_-816365972","id":"20180505-192112_1556031880","dateCreated":"2018-05-05T19:43:32+0200","dateStarted":"2018-05-09T16:18:32+0200","dateFinished":"2018-05-09T16:18:32+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:315"},{"text":"import org.apache.spark.ml.feature.StringIndexer\nimport org.apache.spark.ml.feature.VectorAssembler\n\nval categoricalFeatures = Array(\"CallType\", \"Priority\", \"geohash\")\nval indexers = categoricalFeatures.map(cf => new StringIndexer().setInputCol(s\"$cf\").setOutputCol(s\"${cf}Index\"))\n\nval featureNames = Array(\"HourOfDay\", \"DayOfYear\") ++ indexers.map(_.getOutputCol)\nval assembler = new VectorAssembler().setInputCols(featureNames).setOutputCol(\"features\")\n\nval stages = indexers :+ assembler","user":"anonymous","dateUpdated":"2018-05-13T10:45:33+0200","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.ml.feature.StringIndexer\nimport org.apache.spark.ml.feature.VectorAssembler\ncategoricalFeatures: Array[String] = Array(CallType, Priority, geohash)\nindexers: Array[org.apache.spark.ml.feature.StringIndexer] = Array(strIdx_3542409cd4ca, strIdx_e6865d7425c9, strIdx_b15fcb3997c9)\nfeatureNames: Array[String] = Array(HourOfDay, DayOfYear, CallTypeIndex, PriorityIndex, geohashIndex)\nassembler: org.apache.spark.ml.feature.VectorAssembler = vecAssembler_9d7fb4b5eeb1\nstages: Array[org.apache.spark.ml.PipelineStage with org.apache.spark.ml.param.shared.HasOutputCol with org.apache.spark.ml.util.DefaultParamsWritable{def copy(extra: org.apache.spark.ml.param.ParamMap): org.apache.spark.ml.PipelineStage with org.apache.spark.ml.param.shared.HasOutputCol with org.apache.spark.ml.util.DefaultParamsWritable}] = Array(strIdx_3542409cd4ca, strIdx_e6865d7425c9, strIdx_b15fcb3997c9, vecAssembler_9d7fb4b5eeb1)\n"}]},"apps":[],"jobName":"paragraph_1525542212538_-816365972","id":"20180505-191558_1612387672","dateCreated":"2018-05-05T19:43:32+0200","dateStarted":"2018-05-13T10:45:33+0200","dateFinished":"2018-05-13T10:45:36+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:316"},{"text":"%md ### Show some pre statistics","user":"anonymous","dateUpdated":"2018-05-09T16:18:32+0200","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Show some pre statistics</h3>\n</div>"}]},"apps":[],"jobName":"paragraph_1525542212540_-818674466","id":"20180505-192353_969897850","dateCreated":"2018-05-05T19:43:32+0200","dateStarted":"2018-05-09T16:18:32+0200","dateFinished":"2018-05-09T16:18:32+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:317"},{"text":"val numFeatures = featureNames.length\nprintln(\"numFeatures --> \" + numFeatures)\nprintln(\"trainCount --> \" + train.count())\nprintln(\"testCount --> \" + test.count())\n","user":"anonymous","dateUpdated":"2018-05-13T10:45:38+0200","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"numFeatures: Int = 5\nnumFeatures --> 5\ntrainCount --> 8990\ntestCount --> 1009\n"}]},"apps":[],"jobName":"paragraph_1525542212540_-818674466","id":"20180505-192456_599251436","dateCreated":"2018-05-05T19:43:32+0200","dateStarted":"2018-05-13T10:45:38+0200","dateFinished":"2018-05-13T10:45:43+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:318"},{"text":"%md ### Create a RandomForest classifier","user":"anonymous","dateUpdated":"2018-05-09T16:18:32+0200","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Create a RandomForest classifier</h3>\n</div>"}]},"apps":[],"jobName":"paragraph_1525542212540_-818674466","id":"20180505-192508_1546955132","dateCreated":"2018-05-05T19:43:32+0200","dateStarted":"2018-05-09T16:18:32+0200","dateFinished":"2018-05-09T16:18:32+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:319"},{"text":"import org.apache.spark.ml.Pipeline\nimport org.apache.spark.ml.PipelineStage\nimport org.apache.spark.ml.classification.RandomForestClassifier\n\nval randomForest: PipelineStage = {\n\n    val testPipe = new Pipeline().setStages(stages)\n    val testModel = testPipe.fit(df)\n    val testFrame = testModel.transform(df)\n    \n    //Find feature with max count for maxBins\n    var max:Long = 0\n    featureNames.foreach(feature => {\n      val count = testFrame.agg(countDistinct(feature).as(\"count\")).collectAsList().get(0).getAs[Long](0)\n      max = Math.max(max, count)\n    })\n\n    new RandomForestClassifier()\n        .setImpurity(\"gini\")\n        .setMaxDepth(20)\n        .setNumTrees(30)\n        .setFeatureSubsetStrategy(\"auto\")\n        .setSeed(5043)\n        .setMaxBins(max.toInt)\n}\n","user":"anonymous","dateUpdated":"2018-05-13T10:45:46+0200","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.ml.Pipeline\nimport org.apache.spark.ml.PipelineStage\nimport org.apache.spark.ml.classification.RandomForestClassifier\nrandomForest: org.apache.spark.ml.PipelineStage = rfc_4c7b426115af\n"}]},"apps":[],"jobName":"paragraph_1525542212540_-818674466","id":"20180505-192535_1809949257","dateCreated":"2018-05-05T19:43:32+0200","dateStarted":"2018-05-13T10:45:46+0200","dateFinished":"2018-05-13T10:46:01+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:320"},{"text":"%md ### Create a MultiLayerPerceptron (MLP)","user":"anonymous","dateUpdated":"2018-05-09T16:18:32+0200","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Create a MultiLayerPerceptron (MLP)</h3>\n</div>"}]},"apps":[],"jobName":"paragraph_1525542212540_-818674466","id":"20180505-192649_1409557580","dateCreated":"2018-05-05T19:43:32+0200","dateStarted":"2018-05-09T16:18:32+0200","dateFinished":"2018-05-09T16:18:32+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:321"},{"text":"import org.apache.spark.ml.Pipeline\nimport org.apache.spark.ml.PipelineStage\nimport org.apache.spark.ml.classification.MultilayerPerceptronClassifier\n\nval mlp: PipelineStage = {\n  val layers = Array[Int](numFeatures, 4, 3, 2)\n  new MultilayerPerceptronClassifier()\n        .setLayers(layers)\n        .setBlockSize(64)\n        .setSeed(1234L)\n        .setMaxIter(100000000)\n}\n","user":"anonymous","dateUpdated":"2018-05-09T16:18:32+0200","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.ml.Pipeline\nimport org.apache.spark.ml.PipelineStage\nimport org.apache.spark.ml.classification.MultilayerPerceptronClassifier\nmlp: org.apache.spark.ml.PipelineStage = mlpc_c9b0c723503a\n"}]},"apps":[],"jobName":"paragraph_1525542212541_-819059215","id":"20180505-192850_1802112070","dateCreated":"2018-05-05T19:43:32+0200","dateStarted":"2018-05-09T16:18:46+0200","dateFinished":"2018-05-09T16:18:54+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:322"},{"text":"%md ### Now we can train a model","user":"anonymous","dateUpdated":"2018-05-09T16:18:33+0200","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Now we can train a model</h3>\n</div>"}]},"apps":[],"jobName":"paragraph_1525542212541_-819059215","id":"20180505-192912_1792393046","dateCreated":"2018-05-05T19:43:32+0200","dateStarted":"2018-05-09T16:18:33+0200","dateFinished":"2018-05-09T16:18:33+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:323"},{"text":"val classifier = randomForest\nval pipeline = new Pipeline().setStages(stages :+ classifier)\nval model = pipeline.fit(train)\n","user":"anonymous","dateUpdated":"2018-05-13T10:46:12+0200","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"classifier: org.apache.spark.ml.PipelineStage = rfc_4c7b426115af\npipeline: org.apache.spark.ml.Pipeline = pipeline_cf242aa3047a\nmodel: org.apache.spark.ml.PipelineModel = pipeline_cf242aa3047a\n"}]},"apps":[],"jobName":"paragraph_1525542212541_-819059215","id":"20180505-193004_1865233798","dateCreated":"2018-05-05T19:43:32+0200","dateStarted":"2018-05-13T10:46:12+0200","dateFinished":"2018-05-13T10:46:45+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:324"},{"text":"%md ### Print Statistics","user":"anonymous","dateUpdated":"2018-05-09T16:18:33+0200","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Print Statistics</h3>\n</div>"}]},"apps":[],"jobName":"paragraph_1525542212542_-817904968","id":"20180505-193145_339559320","dateCreated":"2018-05-05T19:43:32+0200","dateStarted":"2018-05-09T16:18:33+0200","dateFinished":"2018-05-09T16:18:33+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:325"},{"text":"import org.apache.spark.sql.DataFrame\nimport org.apache.spark.mllib.evaluation.MulticlassMetrics\n\ndef printStatistics(what: String, result: DataFrame): Unit = {\n    print(s\"\\n\\n$what statistics:\\n\")\n    val predictionAndLabels = result.select(\"prediction\", \"label\")\n    val metrics = new MulticlassMetrics(predictionAndLabels.as[(Double, Double)].rdd)\n    val FPR = metrics.falsePositiveRate(0)\n    val TPR = metrics.truePositiveRate(0)\n\n    println(s\"Accuracy: ${metrics.accuracy}\")\n    println(s\"Confusion matrix: \\n${metrics.confusionMatrix}\")\n    println(s\"Precicion (How many selected items are relevant?): \\n${metrics.precision(0)}\")\n    println(s\"Recall (How many relevant items are selected?)): \\n${metrics.recall(0)}\")\n    println(s\"F-measure (best 1, worst 0): \\n${metrics.fMeasure(0)}\")\n    println(s\"Miss rate: \\n${1-TPR}\")\n    println(s\"False alarm rate: \\n${FPR}\")\n}\n\nval trainResult = model.transform(train)\nprintStatistics(\"Training\", trainResult)\n\nval testResult = model.transform(test)\nprintStatistics(\"Test\", testResult)","user":"anonymous","dateUpdated":"2018-05-13T10:47:12+0200","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.sql.DataFrame\nimport org.apache.spark.mllib.evaluation.MulticlassMetrics\nprintStatistics: (what: String, result: org.apache.spark.sql.DataFrame)Unit\ntrainResult: org.apache.spark.sql.DataFrame = [IncidentNumber: int, CallNumber: int ... 47 more fields]\n\n\nTraining statistics:\nAccuracy: 0.9790878754171302\nConfusion matrix: \n5024.0  100.0   \n88.0    3778.0  \nPrecicion (How many selected items are relevant?): \n0.9827856025039123\nRecall (How many relevant items are selected?)): \n0.9804839968774395\nF-measure (best 1, worst 0): \n0.9816334505666275\nMiss rate: \n0.01951600312256052\nFalse alarm rate: \n0.022762545266425245\ntestResult: org.apache.spark.sql.DataFrame = [IncidentNumber: int, CallNumber: int ... 47 more fields]\n\n\nTest statistics:\nAccuracy: 0.9286422200198216\nConfusion matrix: \n517.0  43.0   \n29.0   420.0  \nPrecicion (How many selected items are relevant?): \n0.9468864468864469\nRecall (How many relevant items are selected?)): \n0.9232142857142858\nF-measure (best 1, worst 0): \n0.9349005424954793\nMiss rate: \n0.07678571428571423\nFalse alarm rate: \n0.0645879732739421\n"}]},"apps":[],"jobName":"paragraph_1525542212542_-817904968","id":"20180505-193157_1933165927","dateCreated":"2018-05-05T19:43:32+0200","dateStarted":"2018-05-13T10:47:12+0200","dateFinished":"2018-05-13T10:47:34+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:326"},{"text":"%md ### Save model","user":"anonymous","dateUpdated":"2018-05-13T10:47:42+0200","config":{"colWidth":12,"editorMode":"ace/mode/markdown","results":{},"enabled":true,"editorSetting":{"language":"markdown","editOnDblClick":true},"editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Save model</h3>\n</div>"}]},"apps":[],"jobName":"paragraph_1525542212543_-818289717","id":"20180505-193240_513348199","dateCreated":"2018-05-05T19:43:32+0200","dateStarted":"2018-05-13T10:47:42+0200","dateFinished":"2018-05-13T10:47:42+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:327"},{"text":"//val timestamp = System.currentTimeMillis / 1000\n//model.save(s\"models/myclassifier-$timestamp\")","user":"anonymous","dateUpdated":"2018-05-09T16:19:09+0200","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1525873303576_880532065","id":"20180509-154143_2005462846","dateCreated":"2018-05-09T15:41:43+0200","dateStarted":"2018-05-09T16:19:09+0200","dateFinished":"2018-05-09T16:19:20+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:328"},{"user":"anonymous","dateUpdated":"2018-05-09T16:18:33+0200","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1525875414793_-1727292167","id":"20180509-161654_97913669","dateCreated":"2018-05-09T16:16:54+0200","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:329"}],"name":"/msi-seminar/CallForService","id":"2DC755BVB","angularObjects":{"2DDC279KC:shared_process":[],"2DBUP5EAS:shared_process":[],"2DAZDNX9N:shared_process":[],"2D9Z6Q5BJ:shared_process":[],"2DDBWDT9X:shared_process":[],"2DAUQWYX5:shared_process":[],"2DC5TJRKP:shared_process":[],"2DA5B17KJ:shared_process":[],"2DD7Q9MS4:shared_process":[],"2DBPCQ1J2:shared_process":[],"2DD5PF1G3:shared_process":[],"2DBT69MZS:shared_process":[],"2DDGMMBB8:shared_process":[],"2DDTG9RP1:shared_process":[],"2DD3Z2K6G:shared_process":[],"2DDQNK69K:shared_process":[],"2DAG3KW3X:shared_process":[],"2DBPKXJB4:shared_process":[],"2DBYT73V5:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}