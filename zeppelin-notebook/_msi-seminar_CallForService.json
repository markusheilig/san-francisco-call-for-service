{"paragraphs":[{"text":"%md ### Access spark variables\n- 'sc' refers to the 'SparkContext'\n- 'spark' refers to the 'SparkSession'","user":"anonymous","dateUpdated":"2018-05-05T19:35:22+0200","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","tableHide":false,"editorHide":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1525537352459_738843874","id":"20180505-182232_100685251","dateCreated":"2018-05-05T18:22:32+0200","dateStarted":"2018-05-05T19:35:22+0200","dateFinished":"2018-05-05T19:35:22+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:15875","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Access spark variables</h3>\n<ul>\n  <li>&lsquo;sc&rsquo; refers to the &lsquo;SparkContext&rsquo;</li>\n  <li>&lsquo;spark&rsquo; refers to the &lsquo;SparkSession&rsquo;</li>\n</ul>\n</div>"}]}},{"text":"sc\nspark","user":"anonymous","dateUpdated":"2018-05-05T19:35:29+0200","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","editorHide":false,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1525537466600_1748225774","id":"20180505-182426_1778627150","dateCreated":"2018-05-05T18:24:26+0200","dateStarted":"2018-05-05T19:35:29+0200","dateFinished":"2018-05-05T19:35:30+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15876","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res172: org.apache.spark.SparkContext = org.apache.spark.SparkContext@42219375\nres173: org.apache.spark.sql.SparkSession = org.apache.spark.sql.SparkSession@1693e0be\n"}]}},{"text":"%md ### Read dataset from csv file into a dataframe called 'df'\nWe will only use a small file with 10k entries for live demonstration","user":"anonymous","dateUpdated":"2018-05-05T19:35:27+0200","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1525537624190_1238033932","id":"20180505-182704_370792577","dateCreated":"2018-05-05T18:27:04+0200","dateStarted":"2018-05-05T19:35:27+0200","dateFinished":"2018-05-05T19:35:27+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15877","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Read dataset from csv file into a dataframe called &lsquo;df&rsquo;</h3>\n<p>We will only use a small file with 10k entries for live demonstration</p>\n</div>"}]}},{"text":"val csvFile = \"/Volumes/TranscendJetdriveLite330/htwg/master/sem4/seminar/scala-spark-mllib-demo/datasets/10k.csv\"\nvar df = spark.read.option(\"header\", \"true\").option(\"inferSchema\", \"true\").csv(csvFile)\n","user":"anonymous","dateUpdated":"2018-05-05T19:35:32+0200","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","editorHide":false,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1525537647903_-1784321920","id":"20180505-182727_211105288","dateCreated":"2018-05-05T18:27:27+0200","dateStarted":"2018-05-05T19:35:32+0200","dateFinished":"2018-05-05T19:35:33+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15878","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"csvFile: String = /Volumes/TranscendJetdriveLite330/htwg/master/sem4/seminar/scala-spark-mllib-demo/datasets/10k.csv\ndf: org.apache.spark.sql.DataFrame = [Call Number: int, Unit ID: string ... 32 more fields]\n"}]}},{"text":"%md ### Rename column names\nColumns of the original dataset contain spaces and dashes -> lets remove them","user":"anonymous","dateUpdated":"2018-05-05T19:35:35+0200","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1525537745059_-1730887796","id":"20180505-182905_417148239","dateCreated":"2018-05-05T18:29:05+0200","dateStarted":"2018-05-05T19:35:35+0200","dateFinished":"2018-05-05T19:35:35+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15879","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Rename column names</h3>\n<p>Columns of the original dataset contain spaces and dashes -&gt; lets remove them</p>\n</div>"}]}},{"text":"val newColumnNames = df.columns.map(_.replace(\" \", \"\").replace(\"-\", \"\"))\ndf = df.toDF(newColumnNames: _*)","user":"anonymous","dateUpdated":"2018-05-05T19:35:37+0200","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":true},"editorMode":"ace/mode/scala","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1525537801597_-290479859","id":"20180505-183001_1663637001","dateCreated":"2018-05-05T18:30:01+0200","dateStarted":"2018-05-05T19:35:37+0200","dateFinished":"2018-05-05T19:35:38+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15880","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"newColumnNames: Array[String] = Array(CallNumber, UnitID, IncidentNumber, CallType, CallDate, WatchDate, ReceivedDtTm, EntryDtTm, DispatchDtTm, ResponseDtTm, OnSceneDtTm, TransportDtTm, HospitalDtTm, CallFinalDisposition, AvailableDtTm, Address, City, ZipcodeofIncident, Battalion, StationArea, Box, OriginalPriority, Priority, FinalPriority, ALSUnit, CallTypeGroup, NumberofAlarms, UnitType, Unitsequenceincalldispatch, FirePreventionDistrict, SupervisorDistrict, NeighborhooodsAnalysisBoundaries, RowID, Location)\ndf: org.apache.spark.sql.DataFrame = [CallNumber: int, UnitID: string ... 32 more fields]\n"}]}},{"text":"%md ### Show dataframe information\n1. lets print the schema\n2. lets print an example row","user":"anonymous","dateUpdated":"2018-05-05T19:37:09+0200","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1525538172183_-1637012353","id":"20180505-183612_1027859655","dateCreated":"2018-05-05T18:36:12+0200","dateStarted":"2018-05-05T19:37:09+0200","dateFinished":"2018-05-05T19:37:09+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15881","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Show dataframe information</h3>\n<ol>\n  <li>lets print the schema</li>\n  <li>lets print an example row</li>\n</ol>\n</div>"}]}},{"text":"df.printSchema()\ndf.show(1)","user":"anonymous","dateUpdated":"2018-05-05T19:35:51+0200","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":true},"editorMode":"ace/mode/scala","editorHide":false,"tableHide":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1525538197544_-1439605519","id":"20180505-183637_1945913416","dateCreated":"2018-05-05T18:36:37+0200","dateStarted":"2018-05-05T19:33:45+0200","dateFinished":"2018-05-05T19:33:47+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15882","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"root\n |-- CallNumber: integer (nullable = true)\n |-- UnitID: string (nullable = true)\n |-- IncidentNumber: integer (nullable = true)\n |-- CallType: string (nullable = true)\n |-- CallDate: string (nullable = true)\n |-- WatchDate: string (nullable = true)\n |-- ReceivedDtTm: string (nullable = true)\n |-- EntryDtTm: string (nullable = true)\n |-- DispatchDtTm: string (nullable = true)\n |-- ResponseDtTm: string (nullable = true)\n |-- OnSceneDtTm: string (nullable = true)\n |-- TransportDtTm: string (nullable = true)\n |-- HospitalDtTm: string (nullable = true)\n |-- CallFinalDisposition: string (nullable = true)\n |-- AvailableDtTm: string (nullable = true)\n |-- Address: string (nullable = true)\n |-- City: string (nullable = true)\n |-- ZipcodeofIncident: integer (nullable = true)\n |-- Battalion: string (nullable = true)\n |-- StationArea: integer (nullable = true)\n |-- Box: integer (nullable = true)\n |-- OriginalPriority: string (nullable = true)\n |-- Priority: string (nullable = true)\n |-- FinalPriority: integer (nullable = true)\n |-- ALSUnit: boolean (nullable = true)\n |-- CallTypeGroup: string (nullable = true)\n |-- NumberofAlarms: integer (nullable = true)\n |-- UnitType: string (nullable = true)\n |-- Unitsequenceincalldispatch: integer (nullable = true)\n |-- FirePreventionDistrict: string (nullable = true)\n |-- SupervisorDistrict: string (nullable = true)\n |-- NeighborhooodsAnalysisBoundaries: string (nullable = true)\n |-- RowID: string (nullable = true)\n |-- Location: string (nullable = true)\n\nn|CallNumber|UnitID|IncidentNumber|CallType|  CallDate| WatchDate|        ReceivedDtTm|           EntryDtTm|        DispatchDtTm|ResponseDtTm|OnSceneDtTm|TransportDtTm|HospitalDtTm|CallFinalDisposition|       AvailableDtTm|             Address|         City|ZipcodeofIncident|Battalion|StationArea| Box|OriginalPriority|Priority|FinalPriority|ALSUnit|CallTypeGroup|NumberofAlarms|UnitType|Unitsequenceincalldispatch|FirePreventionDistrict|SupervisorDistrict|NeighborhooodsAnalysisBoundaries|        RowID|            Location|\nn| 172813828|   T13|      17118402|  Alarms|10/08/2017|10/08/2017|10/08/2017 09:29:...|10/08/2017 09:31:...|10/08/2017 09:31:...|        null|       null|         null|        null|                Fire|10/08/2017 09:32:...|600 Block of POWE...|San Francisco|            94108|      B01|          2|1361|               3|       3|            3|  false|        Alarm|             1|   TRUCK|                         3|                     1|                 3|                        Nob Hill|172813828-T13|(37.790494992376,...|\nnonly showing top 1 row\n\n"}]}},{"text":"%md ### Drop some data\nSome columns contain no values (null) -> lets drop them!","user":"anonymous","dateUpdated":"2018-05-05T19:33:41+0200","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":false,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1525537852983_1828560552","id":"20180505-183052_1909174503","dateCreated":"2018-05-05T18:30:52+0200","dateStarted":"2018-05-05T19:33:41+0200","dateFinished":"2018-05-05T19:33:41+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15883","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Drop some data</h3>\n<p>Some columns contain no values (null) -&gt; lets drop them!</p>\n</div>"}]}},{"text":"df = df.na.drop(Array(\"CallType\", \"Priority\", \"EntryDtTm\"))","user":"anonymous","dateUpdated":"2018-05-05T19:33:41+0200","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","editorHide":false,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1525537952806_-1764670723","id":"20180505-183232_1746008601","dateCreated":"2018-05-05T18:32:32+0200","dateStarted":"2018-05-05T19:33:46+0200","dateFinished":"2018-05-05T19:33:48+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15884","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"df: org.apache.spark.sql.DataFrame = [CallNumber: int, UnitID: string ... 32 more fields]\n"}]}},{"text":"%md ### Let's generate some more features","user":"anonymous","dateUpdated":"2018-05-05T19:33:41+0200","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":false,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1525538013270_787292111","id":"20180505-183333_966739090","dateCreated":"2018-05-05T18:33:33+0200","dateStarted":"2018-05-05T19:33:41+0200","dateFinished":"2018-05-05T19:33:41+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15885","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Let&rsquo;s generate some more features</h3>\n</div>"}]}},{"text":"import org.apache.spark.sql.functions._\n\ndf = df.withColumn(\"EntryDtTm\", unix_timestamp($\"EntryDtTm\", \"MM/dd/yyyy hh:mm:ss a\").cast(\"timestamp\"))\ndf = df.withColumn(\"HourOfDay\", hour($\"EntryDtTm\"))\ndf = df.withColumn(\"DayOfYear\", dayofyear($\"EntryDtTm\"))\n//df = df.withColumn(\"isWeekend\", dayofweek($\"EntryDtTm\") >= 5)\ndf = df.withColumn(\"MonthOfYear\", month($\"EntryDtTm\"))\ndf = df.withColumn(\"WeekOfYear\", weekofyear($\"EntryDtTm\"))","user":"anonymous","dateUpdated":"2018-05-05T19:33:47+0200","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","editorHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1525538326565_958750558","id":"20180505-183846_1695411028","dateCreated":"2018-05-05T18:38:46+0200","dateStarted":"2018-05-05T19:33:47+0200","dateFinished":"2018-05-05T19:33:52+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15886","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.sql.functions._\ndf: org.apache.spark.sql.DataFrame = [CallNumber: int, UnitID: string ... 32 more fields]\ndf: org.apache.spark.sql.DataFrame = [CallNumber: int, UnitID: string ... 33 more fields]\ndf: org.apache.spark.sql.DataFrame = [CallNumber: int, UnitID: string ... 34 more fields]\ndf: org.apache.spark.sql.DataFrame = [CallNumber: int, UnitID: string ... 35 more fields]\ndf: org.apache.spark.sql.DataFrame = [CallNumber: int, UnitID: string ... 36 more fields]\n"}]}},{"user":"anonymous","dateUpdated":"2018-05-05T19:33:41+0200","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1525538394565_1471479635","id":"20180505-183954_520582890","dateCreated":"2018-05-05T18:39:54+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15887","dateFinished":"2018-05-05T19:33:41+0200","dateStarted":"2018-05-05T19:33:41+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Lets create our label column</h3>\n</div>"}]},"text":"%md ### Lets create our label column"},{"text":"val cfs = \"CallFinalDisposition\"\n\ndf = df.withColumn(\"label\", when($\"CallTypeGroup\" === \"Potentially Life-Threatening\" && ($\"$cfs\" === \"Code 2 Transport\" || $\"$cfs\" === \"Fire\" || $\"$cfs\" === \"Patient Declined Transport\" || $\"$cfs\" === \"Against Medical Advice\" || $\"$cfs\" === \"Medical Examiner\" || $\"HospitalDtTm\".isNotNull || $\"HospitalDtTm\" =!= \"\"), 1).otherwise(0))\n\n","user":"anonymous","dateUpdated":"2018-05-05T19:33:48+0200","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1525540424220_1354460130","id":"20180505-191344_1887559871","dateCreated":"2018-05-05T19:13:44+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:17824","dateFinished":"2018-05-05T19:33:53+0200","dateStarted":"2018-05-05T19:33:48+0200","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"cfs: String = CallFinalDisposition\ndf: org.apache.spark.sql.DataFrame = [CallNumber: int, UnitID: string ... 37 more fields]\n"}]}},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1525540432848_-1669666225","id":"20180505-191352_263390882","dateCreated":"2018-05-05T19:13:52+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:17880","text":"%md ### Split dataframe in train & test set","dateUpdated":"2018-05-05T19:33:42+0200","dateFinished":"2018-05-05T19:33:42+0200","dateStarted":"2018-05-05T19:33:42+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Split dataframe in train &amp; test set</h3>\n</div>"}]}},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1525540465185_1795210515","id":"20180505-191425_1484507720","dateCreated":"2018-05-05T19:14:25+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:17987","text":"val Array(train, test) = df.randomSplit(Array(0.7, 0.3), seed = 12345)","dateUpdated":"2018-05-05T19:33:42+0200","dateFinished":"2018-05-05T19:33:53+0200","dateStarted":"2018-05-05T19:33:52+0200","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"train: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [CallNumber: int, UnitID: string ... 37 more fields]\ntest: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [CallNumber: int, UnitID: string ... 37 more fields]\n"}]}},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1525540501195_-1793696577","id":"20180505-191501_1620421215","dateCreated":"2018-05-05T19:15:01+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:18105","text":"%md ### How many incidents are life-threatening?","dateUpdated":"2018-05-05T19:33:42+0200","dateFinished":"2018-05-05T19:33:42+0200","dateStarted":"2018-05-05T19:33:42+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>How many incidents are life-threatening?</h3>\n</div>"}]}},{"text":"val potentiallyLifeThreatening = df.filter($\"label\" === 1).count()\nval percentage = potentiallyLifeThreatening.toDouble / df.count()\nprintln(\"%.2f%% of all incidents are potentially life-threatening\".format(percentage * 100))\n","user":"anonymous","dateUpdated":"2018-05-05T19:33:42+0200","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1525540546629_-585307551","id":"20180505-191546_1871575903","dateCreated":"2018-05-05T19:15:46+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:18211","dateFinished":"2018-05-05T19:33:55+0200","dateStarted":"2018-05-05T19:33:53+0200","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"potentiallyLifeThreatening: Long = 4064\npercentage: Double = 0.40644064406440644\n40.64% of all incidents are potentially life-threatening\n"}]}},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1525540872496_-166612615","id":"20180505-192112_1556031880","dateCreated":"2018-05-05T19:21:12+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:18580","text":"%md ### Convert categorical string values","dateUpdated":"2018-05-05T19:33:42+0200","dateFinished":"2018-05-05T19:33:42+0200","dateStarted":"2018-05-05T19:33:42+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Convert categorical string values</h3>\n</div>"}]}},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1525540558557_807114043","id":"20180505-191558_1612387672","dateCreated":"2018-05-05T19:15:58+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:18284","text":"import org.apache.spark.ml.feature.StringIndexer\n\nval categoricalFeatures = Array(\"CallType\", \"Priority\", \"NeighborhooodsAnalysisBoundaries\")\nval indexers = categoricalFeatures.map(cf => new StringIndexer().setInputCol(s\"$cf\").setOutputCol(s\"${cf}Index\"))","dateUpdated":"2018-05-05T19:33:42+0200","dateFinished":"2018-05-05T19:33:57+0200","dateStarted":"2018-05-05T19:33:54+0200","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.ml.feature.StringIndexer\ncategoricalFeatures: Array[String] = Array(CallType, Priority, NeighborhooodsAnalysisBoundaries)\nindexers: Array[org.apache.spark.ml.feature.StringIndexer] = Array(strIdx_0999795d4ffa, strIdx_3b1fd4764376, strIdx_0b29748c585a)\n"}]}},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":false,"tableHide":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1525540646593_-1402944936","id":"20180505-191726_768170611","dateCreated":"2018-05-05T19:17:26+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:18365","text":"%md ### Define features & assemble into one column called 'features'","dateUpdated":"2018-05-05T19:33:42+0200","dateFinished":"2018-05-05T19:33:42+0200","dateStarted":"2018-05-05T19:33:42+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Define features &amp; assemble into one column called &lsquo;features&rsquo;</h3>\n</div>"}]}},{"text":"import org.apache.spark.ml.feature.VectorAssembler\n\nval featureNames = Array(\"HourOfDay\", \"DayOfYear\") ++ indexers.map(_.getOutputCol)\nval assembler = new VectorAssembler().setInputCols(featureNames).setOutputCol(\"features\")","user":"anonymous","dateUpdated":"2018-05-05T19:33:42+0200","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":true},"editorMode":"ace/mode/scala","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1525540918012_1444593185","id":"20180505-192158_758441188","dateCreated":"2018-05-05T19:21:58+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:18668","dateFinished":"2018-05-05T19:33:58+0200","dateStarted":"2018-05-05T19:33:55+0200","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.ml.feature.VectorAssembler\nfeatureNames: Array[String] = Array(HourOfDay, DayOfYear, CallTypeIndex, PriorityIndex, NeighborhooodsAnalysisBoundariesIndex)\nassembler: org.apache.spark.ml.feature.VectorAssembler = vecAssembler_90f4a8531e21\n"}]}},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1525540944045_1581979191","id":"20180505-192224_950725009","dateCreated":"2018-05-05T19:22:24+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:18760","text":"%md ### Prepare our pipeline stages","dateUpdated":"2018-05-05T19:33:42+0200","dateFinished":"2018-05-05T19:33:42+0200","dateStarted":"2018-05-05T19:33:42+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Prepare our pipeline stages</h3>\n</div>"}]}},{"text":"val stages = indexers :+ assembler\n","user":"anonymous","dateUpdated":"2018-05-05T19:33:42+0200","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1525541012011_-293412831","id":"20180505-192332_1706598234","dateCreated":"2018-05-05T19:23:32+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:18942","dateFinished":"2018-05-05T19:33:59+0200","dateStarted":"2018-05-05T19:33:57+0200","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"stages: Array[org.apache.spark.ml.PipelineStage with org.apache.spark.ml.param.shared.HasOutputCol with org.apache.spark.ml.util.DefaultParamsWritable{def copy(extra: org.apache.spark.ml.param.ParamMap): org.apache.spark.ml.PipelineStage with org.apache.spark.ml.param.shared.HasOutputCol with org.apache.spark.ml.util.DefaultParamsWritable}] = Array(strIdx_0999795d4ffa, strIdx_3b1fd4764376, strIdx_0b29748c585a, vecAssembler_90f4a8531e21)\n"}]}},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1525541033176_-880524328","id":"20180505-192353_969897850","dateCreated":"2018-05-05T19:23:53+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:19031","text":"%md ### Show some pre statistics","dateUpdated":"2018-05-05T19:33:42+0200","dateFinished":"2018-05-05T19:33:42+0200","dateStarted":"2018-05-05T19:33:42+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Show some pre statistics</h3>\n</div>"}]}},{"text":"val numFeatures = featureNames.length\nprintln(\"numFeatures --> \" + numFeatures)\nprintln(\"trainCount --> \" + train.count())\nprintln(\"testCount --> \" + test.count())\n","user":"anonymous","dateUpdated":"2018-05-05T19:33:42+0200","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1525541096211_-1949063969","id":"20180505-192456_599251436","dateCreated":"2018-05-05T19:24:56+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:19130","dateFinished":"2018-05-05T19:34:02+0200","dateStarted":"2018-05-05T19:33:59+0200","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"numFeatures: Int = 5\nnumFeatures --> 5\ntrainCount --> 6988\ntestCount --> 3011\n"}]}},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":false,"tableHide":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1525541108388_700332281","id":"20180505-192508_1546955132","dateCreated":"2018-05-05T19:25:08+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:19217","text":"%md ### Create a RandomForest classifier","dateUpdated":"2018-05-05T19:33:42+0200","dateFinished":"2018-05-05T19:33:43+0200","dateStarted":"2018-05-05T19:33:43+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Create a RandomForest classifier</h3>\n</div>"}]}},{"text":"import org.apache.spark.ml.Pipeline\nimport org.apache.spark.ml.PipelineStage\nimport org.apache.spark.ml.classification.RandomForestClassifier\n\nval randomForest: PipelineStage = {\n\n    val testPipe = new Pipeline().setStages(stages)\n    val testModel = testPipe.fit(df)\n    val testFrame = testModel.transform(df)\n    \n    //Find feature with max count for maxBins\n    var max:Long = 0\n    var count:Long = 0\n    featureNames.foreach(feature => {\n      count = testFrame.agg(countDistinct(feature).as(\"count\")).collectAsList().get(0).getAs[Long](0)\n        if (max < count) {\n          max = count\n        }\n      })\n\n    new RandomForestClassifier()\n        .setImpurity(\"gini\")\n        .setMaxDepth(20)\n        .setNumTrees(30)\n        .setFeatureSubsetStrategy(\"auto\")\n        .setSeed(5043)\n        .setMaxBins(max.toInt/*+10*/)\n}\n","user":"anonymous","dateUpdated":"2018-05-05T19:33:43+0200","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1525541135220_1829832459","id":"20180505-192535_1809949257","dateCreated":"2018-05-05T19:25:35+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:19299","dateFinished":"2018-05-05T19:34:09+0200","dateStarted":"2018-05-05T19:33:59+0200","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.ml.Pipeline\nimport org.apache.spark.ml.PipelineStage\nimport org.apache.spark.ml.classification.RandomForestClassifier\nrandomForest: org.apache.spark.ml.PipelineStage = rfc_69618b93f3fa\n"}]}},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1525541209776_2000969098","id":"20180505-192649_1409557580","dateCreated":"2018-05-05T19:26:49+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:19378","text":"%md ### Create a MultiLayerPerceptron (MLP)","dateUpdated":"2018-05-05T19:33:43+0200","dateFinished":"2018-05-05T19:33:43+0200","dateStarted":"2018-05-05T19:33:43+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Create a MultiLayerPerceptron (MLP)</h3>\n</div>"}]}},{"text":"import org.apache.spark.ml.Pipeline\nimport org.apache.spark.ml.PipelineStage\nimport org.apache.spark.ml.classification.MultilayerPerceptronClassifier\n\nval mlp: PipelineStage = {\n  val layers = Array[Int](numFeatures, 3, 2)\n  new MultilayerPerceptronClassifier()\n        .setLayers(layers)\n        .setBlockSize(128)\n        .setSeed(1234L)\n        .setMaxIter(100)\n}\n","user":"anonymous","dateUpdated":"2018-05-05T19:33:43+0200","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1525541330989_422865383","id":"20180505-192850_1802112070","dateCreated":"2018-05-05T19:28:50+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:19556","dateFinished":"2018-05-05T19:34:10+0200","dateStarted":"2018-05-05T19:34:02+0200","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.ml.Pipeline\nimport org.apache.spark.ml.PipelineStage\nimport org.apache.spark.ml.classification.MultilayerPerceptronClassifier\nmlp: org.apache.spark.ml.PipelineStage = mlpc_e318f4c35f67\n"}]}},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":false,"tableHide":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1525541352517_-413178653","id":"20180505-192912_1792393046","dateCreated":"2018-05-05T19:29:12+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:19629","text":"%md ### Now we can train a model","dateUpdated":"2018-05-05T19:33:43+0200","dateFinished":"2018-05-05T19:33:43+0200","dateStarted":"2018-05-05T19:33:43+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Now we can train a model</h3>\n</div>"}]}},{"text":"val classifier = randomForest\nval pipeline = new Pipeline().setStages(stages :+ classifier)\nval model = pipeline.fit(train)\n","user":"anonymous","dateUpdated":"2018-05-05T19:33:43+0200","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":true},"editorMode":"ace/mode/scala","editorHide":false,"tableHide":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1525541404567_1810947470","id":"20180505-193004_1865233798","dateCreated":"2018-05-05T19:30:04+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:19729","dateFinished":"2018-05-05T19:34:32+0200","dateStarted":"2018-05-05T19:34:09+0200","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"classifier: org.apache.spark.ml.PipelineStage = rfc_69618b93f3fa\npipeline: org.apache.spark.ml.Pipeline = pipeline_0d4b970e6cae\nmodel: org.apache.spark.ml.PipelineModel = pipeline_0d4b970e6cae\n"}]}},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1525541423896_-287827132","id":"20180505-193023_364955215","dateCreated":"2018-05-05T19:30:23+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:19809","text":"%md ### Save model","dateUpdated":"2018-05-05T19:33:43+0200","dateFinished":"2018-05-05T19:33:43+0200","dateStarted":"2018-05-05T19:33:43+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Save model</h3>\n</div>"}]}},{"text":"//val timestamp = System.currentTimeMillis / 1000\n//model.save(s\"models/myclassifier-$timestamp\")","user":"anonymous","dateUpdated":"2018-05-05T19:33:43+0200","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1525541463482_-924324406","id":"20180505-193103_908371857","dateCreated":"2018-05-05T19:31:03+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:19902","dateFinished":"2018-05-05T19:34:32+0200","dateStarted":"2018-05-05T19:34:11+0200","results":{"code":"SUCCESS","msg":[]}},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1525541505063_559864995","id":"20180505-193145_339559320","dateCreated":"2018-05-05T19:31:45+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:19981","text":"%md ### Print Statistics","dateUpdated":"2018-05-05T19:33:43+0200","dateFinished":"2018-05-05T19:33:43+0200","dateStarted":"2018-05-05T19:33:43+0200","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Print Statistics</h3>\n</div>"}]}},{"text":"import org.apache.spark.sql.DataFrame\nimport org.apache.spark.mllib.evaluation.MulticlassMetrics\n\ndef printStatistics(what: String, result: DataFrame): Unit = {\n    print(s\"\\n\\n$what statistics:\\n\")\n    val predictionAndLabels = result.select(\"prediction\", \"label\")\n    val metrics = new MulticlassMetrics(predictionAndLabels.as[(Double, Double)].rdd)\n    val FPR = metrics.falsePositiveRate(0)\n    val TPR = metrics.truePositiveRate(0)\n\n    println(s\"Accuracy: ${metrics.accuracy}\")\n    println(s\"Confusion matrix: \\n${metrics.confusionMatrix}\")\n    println(s\"Precicion (How many selected items are relevant?): \\n${metrics.precision(0)}\")\n    println(s\"Recall (How many relevant items are selected?)): \\n${metrics.recall(0)}\")\n    println(s\"F-measure (best 1, worst 0): \\n${metrics.fMeasure(0)}\")\n    println(s\"Miss rate: \\n${1-TPR}\")\n    println(s\"False alarm rate: \\n${FPR}\")\n}\n\nval trainResult = model.transform(train)\nprintStatistics(\"Training\", trainResult)\n\nval testResult = model.transform(test)\nprintStatistics(\"Test\", testResult)","user":"anonymous","dateUpdated":"2018-05-05T19:35:21+0200","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1525541517668_-942579459","id":"20180505-193157_1933165927","dateCreated":"2018-05-05T19:31:57+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:20038","dateFinished":"2018-05-05T19:35:09+0200","dateStarted":"2018-05-05T19:34:58+0200","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.sql.DataFrame\nimport org.apache.spark.mllib.evaluation.MulticlassMetrics\nprintStatistics: (what: String, result: org.apache.spark.sql.DataFrame)Unit\ntrainResult: org.apache.spark.sql.DataFrame = [CallNumber: int, UnitID: string ... 44 more fields]\n\n\nTraining statistics:\nAccuracy: 0.9520606754436176\nConfusion matrix: \n3977.0  158.0   \n177.0   2676.0  \nPrecicion (How many selected items are relevant?): \n0.95739046701974\nRecall (How many relevant items are selected?)): \n0.9617896009673519\nF-measure (best 1, worst 0): \n0.9595849921582821\nMiss rate: \n0.03821039903264811\nFalse alarm rate: \n0.06203995793901157\n\n\ntestResult: org.apache.spark.sql.DataFrame = [CallNumber: int, UnitID: string ... 44 more fields]\n\n\nTest statistics:\nAccuracy: 0.8781135835270674\nConfusion matrix: \n1616.0  184.0   \n183.0   1028.0  \nPrecicion (How many selected items are relevant?): \n0.8982768204558088\nRecall (How many relevant items are selected?)): \n0.8977777777777778\nF-measure (best 1, worst 0): \n0.8980272297860518\nMiss rate: \n0.10222222222222221\nFalse alarm rate: \n0.15111478117258464\n\n\n"}]}},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1525541560814_-695878794","id":"20180505-193240_513348199","dateCreated":"2018-05-05T19:32:40+0200","status":"READY","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:20129"}],"name":"/msi-seminar/CallForService","id":"2DC1DY5ZG","angularObjects":{"2DDC279KC:shared_process":[],"2DBUP5EAS:shared_process":[],"2DAZDNX9N:shared_process":[],"2D9Z6Q5BJ:shared_process":[],"2DDBWDT9X:shared_process":[],"2DAUQWYX5:shared_process":[],"2DC5TJRKP:shared_process":[],"2DA5B17KJ:shared_process":[],"2DD7Q9MS4:shared_process":[],"2DBPCQ1J2:shared_process":[],"2DD5PF1G3:shared_process":[],"2DBT69MZS:shared_process":[],"2DDGMMBB8:shared_process":[],"2DDTG9RP1:shared_process":[],"2DD3Z2K6G:shared_process":[],"2DDQNK69K:shared_process":[],"2DAG3KW3X:shared_process":[],"2DBPKXJB4:shared_process":[],"2DBYT73V5:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}